shiny::runApp()
border
shiny::runApp()
runApp()
runApp()
runApp()
leaflet(options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
addMarkers(lng = 145, lat = -37)
leaflet(options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = 145, lat = -37)
leaflet(options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145), lat = c(-37))
leaflet(options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145, 145.6), lat = c(-37, -37.5))
leaflet(data = NULL,
options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145, 145.6), lat = c(-37, -37.5))
leaflet(data = data.frame(lng = c(145, 145.6), lat = c(-37, -37.5)),
options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
addMarkers(lng = lng, lat = lat)
leaflet(data = data.frame(lng = c(145, 145.6), lat = c(-37, -37.5)),
options = leafletOptions(zoomControlPosition = "topright")) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat)
leaflet(data = data.frame(lng = c(145, 145.6), lat = c(-37, -37.5))) %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
addMarkers(lng = ~lng, lat = ~lat)
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145, 145.6), lat = c(-37, -37.5))
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
# addTiles() %>%
leaflet::addMarkers(lng = c(145, 145.6), lat = c(-37, -37.5))
leaflet() %>%
# setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145, 145.6), lat = c(-37, -37.5))
leaflet() %>%
# setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145), lat = c(-37.5))
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(lng = c(145), lat = c(-37.5))
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(icon = "?", lng = c(145), lat = c(-37.5))
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
leaflet::addMarkers(icon = "*", lng = c(145), lat = c(-37.5))
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
addMarkers(lng = c(145), lat = c(-37.5))
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
source("~/.active-rstudio-document", echo=TRUE)
install.packages("leaflet", dependencies = TRUE)
library(leaflet)
leaflet() %>%
setView(lng = 135.51, lat = -25.98, zoom = 3) %>%
addTiles() %>%
addMarkers(lng = c(145), lat = c(-37.5))
data(quakes)
# Show first 20 rows from the `quakes` dataset
leaflet(data = quakes[1:20,]) %>% addTiles() %>%
addMarkers(~long, ~lat, popup = ~as.character(mag), label = ~as.character(mag))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
source("C:/Users/61423/Cesar_projects/WindDispersalForecastTool/Scripts/wind_download.R", echo=TRUE)
source("C:/Users/61423/Cesar_projects/WindDispersalForecastTool/Scripts/wind_download.R", echo=TRUE)
download_wind(
dates = 20220522,
time = 00,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220522/00/"
)
Sys.sleep(5)
download_wind(
dates = 20220522,
time = 06,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220522/06/"
)
Sys.sleep(5)
download_wind(
dates = 20220522,
time = 12,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220522/12/"
)
Sys.sleep(5)
download_wind(
dates = 20220522,
time = 18,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220522/18/"
)
Sys.sleep(5)
download_wind(
dates = 20220523,
time = 00,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220523/00/"
)
Sys.sleep(5)
download_wind(
dates = 20220523,
time = 06,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220523/06/"
)
Sys.sleep(5)
download_wind(
dates = 20220523,
time = 12,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220523/12/"
)
Sys.sleep(5)
download_wind(
dates = 20220523,
time = 18,
nforecast = 48,
level_mb = 850,
outdir = "WindData/20220523/18/"
)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
20220523/06/gfs_ugrd_850mb_20220523_t06z_f001
rast("https://cesar-storage.s3.ap-southeast-2.amazonaws.com/wind-data/20220522/06/gfs_ugrd_850mb_20220522_t06z_f001")
# MW stream network v 1.2
dsn_host = "water-dev.its.unimelb.edu.au"
dsn_port = 5432
dsn_db = "mwstr"
dsn_user = "readonly"
dsn_pwd = "reachcode_42"
db_filename = 'mwstr database'
.db_connect <- function(){
DBI::dbConnect(RPostgres::Postgres(),
host = dsn_host,
port = 5432,
user = dsn_user,
password = dsn_pwd,
dbname = dsn_db
)
}
# MW stream network v 1.2
dsn_host = "water-dev.its.unimelb.edu.au"
dsn_port = 5432
dsn_db = "mwstr"
dsn_user = "readonly"
dsn_pwd = "reachcode_42"
db_filename = 'mwstr database'
.db_connect <- function(){
DBI::dbConnect(RPostgres::Postgres(),
host = dsn_host,
port = 5432,
user = dsn_user,
password = dsn_pwd,
dbname = dsn_db
)
}
library(dplyr)
library(dbplyr)
tab_con <- tbl(.db_connect(), in_schema("public", db_filename))
# MW stream network v 1.2
dsn_host = "water-dev.its.unimelb.edu.au"
dsn_port = 5432
dsn_db = "mwstr"
dsn_user = "readonly"
dsn_pwd = "reachcode_42"
db_filename = 'mwstr database'
.db_connect <- function(){
DBI::dbConnect(RPostgres::Postgres(),
host = dsn_host,
port = 5432,
user = dsn_user,
password = dsn_pwd,
dbname = dsn_db
)
}
data <- DBI::dbGetQuery(.db_connect(), '
SELECT
*
FROM
`mwstr database`
')
datename <- format(lubridate::today(), "%Y%m%d")
datename
datename <- format(lubridate::today(), "%Y%m%d")
file.path("~/wind-data/", datename)
file.path("~/wind-data", datename)
datename
datedir
maindir <- "~/wind-data"
datename <- format(lubridate::today(), "%Y%m%d")
datedir <- file.path("~/wind-data", datename)
maindir <- "wind-data"
datename <- format(lubridate::today(), "%Y%m%d")
datedir <- file.path("~/wind-data", datename)
datedir
maindir <- "wind-data"
datename <- format(lubridate::today(), "%Y%m%d")
datedir <- file.path("~/wind-data", datename)
datedir
maindir <- "wind-data"
datename <- format(lubridate::today(), "%Y%m%d")
datedir <- file.path(maindir, datename)
datedir
maindir <- "wind-data"
datename <- format(lubridate::today(), "%Y%m%d")
datedir <- file.path(maindir, datename)
dir.create(datedir)
maindir <- "wind-data"
datename <- format(lubridate::today() - 1, "%Y%m%d")
datedir <- file.path(maindir, datename)
dir.create(datedir)
datename
datedir
for(i in  c("00", "06", "12", "18")){
dir.create(file.path(datedir, i))
# Sys.sleep(1)
# download_wind(
#   dates = datename,
#   time = i,
#   nforecast = 48,
#   level_mb = 850,
#   outdir = file.path(datedir, i)
# )
print(file.path(datedir, i))
# Sys.sleep(3)
}
maindir <- "wind-data"
datename <- format(lubridate::today() - 1, "%Y%m%d")
datedir <- file.path(maindir, datename)
dir.create(datedir)
for(i in  c("00", "06", "12", "18")){
dir.create(file.path(datedir, i))
# Sys.sleep(1)
# download_wind(
#   dates = datename,
#   time = i,
#   nforecast = 48,
#   level_mb = 850,
#   outdir = file.path(datedir, i)
# )
print(file.path(datedir, i))
# Sys.sleep(3)
}
maindir <- "wind-data"
datename <- format(lubridate::today() - 1, "%Y%m%d")
datedir <- file.path(maindir, datename)
dir.create(datedir)
for(i in  c("00", "06", "12", "18")){
dir.create(file.path(datedir, i))
Sys.sleep(1)
download_wind(
dates = datename,
time = i,
nforecast = 48,
level_mb = 850,
outdir = file.path(datedir, i)
)
Sys.sleep(3)
}
source("C:/Users/61423/Cesar_projects/WindDispersalForecastTool/Scripts/wind_download.R", echo=TRUE)
for(i in  c("00", "06", "12", "18")){
dir.create(file.path(datedir, i))
Sys.sleep(1)
download_wind(
dates = datename,
time = i,
nforecast = 48,
level_mb = 850,
outdir = file.path(datedir, i)
)
Sys.sleep(3)
}
runApp()
# read Australian border
border <- st_read("SpatialData/australia_states.gpkg", quiet = TRUE) %>%
sf::st_cast(to = "MULTILINE")
# read Australian border
border <- st_read("SpatialData/australia_states.gpkg", quiet = TRUE) %>%
sf::st_cast(to = "MULTILINESTRING")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
sample(0:1, 1)
speed_ctr
runApp()
runApp()
geodata::world()
geodata::world(path = "zzz/")
readRDS("zzz/gadm36_adm0_r5_pk.rds")
terra::vect("zzz/gadm36_adm0_r5_pk.rds")
readRDS("zzz/gadm36_adm0_r5_pk.rds") %>%
terra::vect()
readRDS("zzz/gadm36_adm0_r5_pk.rds") %>%
terra::vect() %>%
plot()
readRDS("zzz/gadm36_adm0_r5_pk.rds") %>%
terra::vect() %>%
mapview::mapview()
readRDS("zzz/gadm36_adm0_r5_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
mapview::mapview()
geodata::world(path = "zzz/", level = 3)
geodata::world(path = "zzz/", level = 1)
geodata::world(path = "zzz/", resolution = 3)
readRDS("zzz/gadm36_adm0_r5_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
mapview::mapview()
readRDS("zzz/gadm36_adm0_r3_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
mapview::mapview()
geodata::world(path = "zzz/", resolution = 1)
geodata::world(path = "zzz/", resolution = 1)
readRDS("zzz/gadm36_adm0_r1_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
mapview::mapview()
geodata::gadm(country = "Australia", path = "zzz/")
geodata::gadm(country = "Australia", level = 1, path = "zzz/")
readRDS("zzz/gadm36_AUS_1_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
mapview::mapview()
st_read("SpatialData/australia_states.gpkg") %>%
# terra::vect() %>%
# st_as_sf() %>%
mapview::mapview()
readRDS("zzz/gadm36_AUS_1_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
mapview::mapview()
ww <- readRDS("zzz/gadm36_adm0_r1_pk.rds") %>%
terra::vect() %>%
st_as_sf()
ww
ww %>%
filter(GID_0 != "AUS")
ww %>%
filter(GID_0 != "AUS") %>%
mapview::mapview()
ww <- readRDS("zzz/gadm36_adm0_r1_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
filter(GID_0 != "AUS")
rast("wind-data/20220523/00/gfs_ugrd_850mb_20220523_t00z_f000")
ww %>%
st_crop(c(95, 165, -55, 10))
ww
st_crs(ww)
rast("wind-data/20220523/00/gfs_ugrd_850mb_20220523_t00z_f000") %>%
ext()
ww %>%
st_crop(c(95, 165, -51, 10))
ww %>%
st_crop(y = c(95, 165, -51, 10))
ext(c(95, 165, -55, 10))
ww %>%
st_crop(y = ext(c(95, 165, -55, 10)))
ww %>%
st_crop(y = ext(c(95, 165, -51, 10)))
ww <- readRDS("zzz/gadm36_adm0_r1_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
filter(GID_0 != "AUS") %>%
st_transform(crs = 4326)
rast("wind-data/20220523/00/gfs_ugrd_850mb_20220523_t00z_f000") %>%
ext()
ww %>%
st_crop(y = ext(c(95, 165, -51, 10)))
ww %>%
st_crop(y = ext(c(95, 161, -51, 10)))
rr <- rast("wind-data/20220523/00/gfs_ugrd_850mb_20220523_t00z_f000") %>%
ext()
ww %>%
st_crop(ext(c(95, 161, -51, 10)))
ww %>%
st_crop(rr))
ww %>%
st_crop(rr)
ww <- readRDS("zzz/gadm36_adm0_r1_pk.rds") %>%
terra::vect() %>%
st_as_sf() %>%
filter(GID_0 != "AUS") %>%
st_transform(crs = 4326)
rr <- rast("wind-data/20220523/00/gfs_ugrd_850mb_20220523_t00z_f000") %>%
ext()
ww %>%
st_crop(rr)
st_write(ww, "C:/Users/61423/Desktop/world.shp")
rr <- rast("wind-data/20220523/00/gfs_ugrd_850mb_20220523_t00z_f000")
writeRaster(rr, "C:/Users/61423/Desktop/rast_example.tif")
st_write(au, "C:/Users/61423/Desktop/ausss.shp")
au <- readRDS("zzz/gadm36_AUS_1_pk.rds") %>%
terra::vect() %>%
st_as_sf()
st_write(au, "C:/Users/61423/Desktop/ausss.shp")
bord <- st_read("C:/Users/61423/Desktop/border/world_Clip_Union.shp")
plot(bord)
plot(bord$geometry)
plot(rr)
plot(bord$geometry, add = TRUE)
st_write(bord, "SpatialData/borders.gpkg")
border <- st_read("SpatialData/borders.gpkg", quiet = TRUE) %>%
sf::st_cast(to = "MULTILINESTRING")
st_read("SpatialData/borders.gpkg", quiet = TRUE)
st_read("SpatialData/borders.gpkg", quiet = TRUE)
st_read("SpatialData/borders.gpkg", quiet = TRUE) %>%
sf::st_cast(to = "MULTILINESTRING")
# read Australian border
border <- st_read("SpatialData/borders.gpkg", quiet = TRUE) %>%
sf::st_cast(to = "MULTILINESTRING")
# read Australian border
border <- st_read("SpatialData/borders.gpkg", quiet = TRUE)
# read Australian border
border <- st_read("SpatialData/borders.gpkg", quiet = TRUE) %>%
sf::st_cast(to = "MULTILINESTRING")
runApp()
runApp()
runApp()
runApp()
runApp()
